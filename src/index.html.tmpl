<!DOCTYPE html>
<html style="height: 100%;">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>EternaJS</title>

    <!--
    These scripts are all grabbed from https://github.com/EteRNAgame/website/tree/master/frontend
    -->

    <link type="text/css" rel="stylesheet" media="all" href="./frontend/themes/css/eterna.css" />

    <script>
        __comment_bak = Comment;
    </script>

    <script src="./frontend/jscripts/jquery/jquery-1.7.2.min.js"></script>
    <script src="./frontend/jscripts/jquery/jquery-unselectable.js"></script>
    <script src="./frontend/jscripts/jquery-ui/jquery-ui-1.8.7.custom.min.js"></script>
    <script src="./frontend/jscripts/json/json2.js"></script>

    <script src="./frontend/jscripts/application.js"></script>
    <script src="./frontend/jscripts/utils.js"></script>
    <script src="./frontend/jscripts/ajaxmanager.js"></script>
    <script src="./frontend/jscripts/datamanager.js"></script>
    <script src="./frontend/jscripts/usermanager.js"></script>

    <script src="./frontend/jscripts/eterna/eterna-application.js"></script>
    <script src="./frontend/jscripts/eterna/eterna-utils.js"></script>
    <script src="./frontend/jscripts/eterna/script-library.js"></script>
    <script src="./frontend/jscripts/eterna/script-interface.js"></script>
    <script src="./frontend/jscripts/eterna/presenter.js"></script>

    <script>
        // The Coffeescript code exposes a Comment object, which clobbers a browser global, which we do not use,
        // but the browser global is used by DOMPurify
        Comment = __comment_bak;
    </script>
</head>
<body style="margin: 0; padding: 0; height: 100%;">

<!-- Scripts expect that an element with "maingame" will exist, so this name shouldn't be changed -->
<div id="maingame"></div>

<!-- In-game chat. Hidden to begin with; the game is in charge of displaying it -->
<div id="chat-container" class="ingame-chat hidden">
</div>

<!-- Load our webpack bundles -->
<%= htmlWebpackPlugin.tags.bodyTags %>

<script>

var canvas = document.querySelector("#canvas");
  var gl = canvas.getContext("webgl");
  if (!gl) {
    return;
  }
  const sphereBufferInfo = primitives.createSphereWithVertexColorsBufferInfo(gl, 10, 12, 6);
  const cubeBufferInfo   = primitives.createCubeWithVertexColorsBufferInfo(gl, 20);
  const coneBufferInfo   = primitives.createTruncatedConeWithVertexColorsBufferInfo(gl, 10, 0, 20, 12, 1, true, false);

  
  var programInfo = webglUtils.createProgramInfo(gl, ["vertex-shader-3d", "fragment-shader-3d"]);

  function degToRad(d) {
    return d * Math.PI / 180;
  }

  var cameraAngleRadians = degToRad(0);
  var fieldOfViewRadians = degToRad(60);
  var cameraHeight = 50;


  var sphereUniforms = {
    u_colorMult: [0.5, 1, 0.5, 1],
    u_matrix: m4.identity(),
  };
  var cubeUniforms = {
    u_colorMult: [1, 0.5, 0.5, 1],
    u_matrix: m4.identity(),
  };
  var coneUniforms = {
    u_colorMult: [0.5, 0.5, 1, 1],
    u_matrix: m4.identity(),
  };
  var sphereTranslation = [  0, 0, 0];
  var cubeTranslation   = [-40, 0, 0];
  var coneTranslation   = [ 40, 0, 0];

  function computeMatrix(viewProjectionMatrix, translation, xRotation, yRotation) {
    var matrix = m4.translate(viewProjectionMatrix,
        translation[0],
        translation[1],
        translation[2]);
    matrix = m4.xRotate(matrix, xRotation);
    return m4.yRotate(matrix, yRotation);
  }

  requestAnimationFrame(drawScene);


  function drawScene(time) {
    time *= 0.0005;

    webglUtils.resizeCanvasToDisplaySize(gl.canvas);


    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);

    gl.enable(gl.CULL_FACE);
    gl.enable(gl.DEPTH_TEST);


    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);


    var aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;
    var projectionMatrix =
        m4.perspective(fieldOfViewRadians, aspect, 1, 2000);


    var cameraPosition = [0, 0, 100];
    var target = [0, 0, 0];
    var up = [0, 1, 0];
    var cameraMatrix = m4.lookAt(cameraPosition, target, up);


    var viewMatrix = m4.inverse(cameraMatrix);

    var viewProjectionMatrix = m4.multiply(projectionMatrix, viewMatrix);

    var sphereXRotation =  time;
    var sphereYRotation =  time;
    var cubeXRotation   = -time;
    var cubeYRotation   =  time;
    var coneXRotation   =  time;
    var coneYRotation   = -time;



    gl.useProgram(programInfo.program);


    webglUtils.setBuffersAndAttributes(gl, programInfo, sphereBufferInfo);

    sphereUniforms.u_matrix = computeMatrix(
        viewProjectionMatrix,
        sphereTranslation,
        sphereXRotation,
        sphereYRotation);


    webglUtils.setUniforms(programInfo, sphereUniforms);

    gl.drawArrays(gl.TRIANGLES, 0, sphereBufferInfo.numElements);


    webglUtils.setBuffersAndAttributes(gl, programInfo, cubeBufferInfo);

    cubeUniforms.u_matrix = computeMatrix(
        viewProjectionMatrix,
        cubeTranslation,
        cubeXRotation,
        cubeYRotation);


    webglUtils.setUniforms(programInfo, cubeUniforms);

    gl.drawArrays(gl.TRIANGLES, 0, cubeBufferInfo.numElements);


    webglUtils.setBuffersAndAttributes(gl, programInfo, coneBufferInfo);

    coneUniforms.u_matrix = computeMatrix(
        viewProjectionMatrix,
        coneTranslation,
        coneXRotation,
        coneYRotation);

    webglUtils.setUniforms(programInfo, coneUniforms);

    gl.drawArrays(gl.TRIANGLES, 0, coneBufferInfo.numElements);

    requestAnimationFrame(drawScene);
  }
    Application.GET_URI = "<%= htmlWebpackPlugin.options.process.env.APP_SERVER_URL %>/get/";
    Application.POST_URI = "<%= htmlWebpackPlugin.options.process.env.APP_SERVER_URL %>/get/";

    const params = new URLSearchParams(window.location.search);
    const numberParam = (name) => params.has(name) ? Number(params.get(name)) : undefined;

    const containerID = "maingame";
    const appContainer = document.getElementById(containerID);

    let designBrowserFilters = [];
    for (let ii = 1; ; ++ii) {
        let filterName = "filter" + ii;
        if (params.has(filterName)) {
            designBrowserFilters.push({
                category: params.get(filterName),
                arg1: params.get(filterName + "_arg1"),
                arg2: params.get(filterName + "_arg2"),
            });
        } else {
            break;
        }
    }

    const app = new EternaApp({
        containerID: containerID,
        chatboxID: "chat-container",
        width: appContainer.clientWidth,
        height: appContainer.clientHeight,

        mode: params.get("mode"),
        puzzleID: numberParam("puzzle"),
        solutionID: numberParam("solution"),
        puzzleEditNumTargets: numberParam("puzzleEditNumTargets"),
        folderName: params.get("folder"),
        sequence: params.get("sequence"),
        designBrowserFilters: designBrowserFilters,
    });
    window.app = app;
    app.run();

    window.addEventListener("resize", () => {
        app.resize(appContainer.clientWidth, appContainer.clientHeight);
    });
</script>
</body>
</html>
